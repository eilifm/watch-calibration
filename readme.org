* Watch Calibration

  small program that analyzes a recording of a watch or clock and
  tells you how slow or fast it runs

* usage
  
  #+BEGIN_EXAMPLE
  python fourier.py recording.wav
  #+END_EXAMPLE
  
  =recording.wav= should be a mono sound file.  results aren't
  sensitive to the sampling frequency, unless it's too low.  but
  there's no reason not to just use the 44.1k rate that's pretty
  standard.

* examples

  with a good-quality recording, you'll see something like this:

  [[./test-results/plots/strong-signal.png]]

  the top panel shows the last 10 seconds on the recording.  here, you
  can clearly see the individual ticks (this watch ticks 6 times per
  second).  and the noise

  the bottom left plot shows the fourier transform of the recording,
  zoomed in to the range of 0.5-10 Hz.

  and the bottom right plot shows a fit to the spectral peak, used to
  estimate the peak frequency to high precision.

  with a low quality recording, you'll see something more like this

  [[./test-results/plots/weak-signal.png]]

  here, the individual ticks are buried in the noise.  but the program
  still picks them out!  you lose some precision, however

* accuracy

  [[./test-results/plots/error-plot.png]]

  i've tested the program using synthetic signals generated a couple
  of different ways.  the results are summarized in the plot above

  the fractional uncertainty in the measurement scales falls with the
  length of the recording to the 1.5 power.  it also depends on noise.

  if your goal is to regulate the clock to ~ 1 second / day, 30
  seconds or a minute of high-quality recording should do it.  even
  with a low quality recording, 5 minutes or so should get you there.

  if you have a decent quality recording, in 10 minutes you can get
  the frequency to one part in 10 million.  pretty impressive, i think!

* how it works
  
  i fourier transform the input signal to measure the peak frequency.
  before transforming, i hit the signal with a Gaussian window... i
  choose the width so that frequency peaks will have a Gaussian shape
  with a width of ~3 frequency bins.  This can be fit accurately with
  a Gaussian profile, yielding a good estimate of the true frequency.

  i use a scipy function to automatically identify the peaks, which
  seems to work

  and i attempt to identify an "optimum" length for the FFT.  it seems
  to work pretty well.

* todo
  
  do a better job estimating the uncertainty.  automatically suggest
  whether the user needs a longer recording, or if we have enough
  data.
